// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OSS.Twtr.App.Infrastructure;

#nullable disable

namespace OSS.Twtr.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230705172846_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Block", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserIdToBlock")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("BlockedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "UserIdToBlock");

                    b.HasIndex("UserIdToBlock");

                    b.ToTable("BlockedUsers", (string)null);
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Bookmark", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TweetId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("BookmarkedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "TweetId");

                    b.HasIndex("TweetId");

                    b.ToTable("Bookmarks", (string)null);
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TweetId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LikedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "TweetId");

                    b.HasIndex("TweetId");

                    b.ToTable("Likes", (string)null);
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Mute", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserIdToMute")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("MutedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "UserIdToMute");

                    b.HasIndex("UserIdToMute");

                    b.ToTable("MutedUsers", (string)null);
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.ProfilePicture", b =>
                {
                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures", (string)null);
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("FollowerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubscribedToUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SubscribedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FollowerUserId", "SubscribedToUserId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<Guid>("TweetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("TweetId");

                    b.ToTable("Tokens", (string)null);
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Trending", b =>
                {
                    b.Property<DateTime>("AnalyzedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TweetCount")
                        .HasColumnType("integer");

                    b.HasKey("AnalyzedOn", "Name");

                    b.ToTable("Trendings", (string)null);
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Tweet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AllowedReplies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<int>("LikesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReferenceTweetId")
                        .HasColumnType("uuid");

                    b.Property<int>("RetweetsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<Guid?>("ThreadId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReferenceTweetId");

                    b.ToTable("Tweets", (string)null);
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Job")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PinnedTweetId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PinnedTweetId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Block", b =>
                {
                    b.HasOne("OSS.Twtr.App.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OSS.Twtr.App.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserIdToBlock")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Bookmark", b =>
                {
                    b.HasOne("OSS.Twtr.App.Domain.Entities.Tweet", null)
                        .WithMany()
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OSS.Twtr.App.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Like", b =>
                {
                    b.HasOne("OSS.Twtr.App.Domain.Entities.Tweet", null)
                        .WithMany()
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OSS.Twtr.App.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Mute", b =>
                {
                    b.HasOne("OSS.Twtr.App.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OSS.Twtr.App.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserIdToMute")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.ProfilePicture", b =>
                {
                    b.HasOne("OSS.Twtr.App.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("OSS.Twtr.App.Domain.Entities.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Token", b =>
                {
                    b.HasOne("OSS.Twtr.App.Domain.Entities.Tweet", null)
                        .WithMany()
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.Tweet", b =>
                {
                    b.HasOne("OSS.Twtr.App.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OSS.Twtr.App.Domain.Entities.Tweet", "ReferenceTweet")
                        .WithMany()
                        .HasForeignKey("ReferenceTweetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ReferenceTweet");
                });

            modelBuilder.Entity("OSS.Twtr.App.Domain.Entities.User", b =>
                {
                    b.HasOne("OSS.Twtr.App.Domain.Entities.Tweet", null)
                        .WithOne()
                        .HasForeignKey("OSS.Twtr.App.Domain.Entities.User", "PinnedTweetId");
                });
#pragma warning restore 612, 618
        }
    }
}
